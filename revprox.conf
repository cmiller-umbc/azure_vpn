# Map HTTP Forwarded header to a variable we can assign to $backend_url
map $http_forwarded $backend_url {
    default "";
    "~*for=([^;]+);" $1;
}

# Configures a reverse proxy server that passes the $backend_url variable containing HTTP Forwarded header info as the backend server address
server {
    listen 80;
    listen 443;
    error_log logs/error.log;
    access_log logs/access.log main;

    #URI wildcard handles all requests
    location / {
        #DNS resolving to CloudFlare public DNS
        resolver 1.1.1.1;

        #Return an error message if there is no HTTP Forwarded header
        if ($backend_url = '') {
            error_page 400 /error.html;
            return 400;
        }

        #Passes the Forwarded header for= contents to the reverse proxy as the new destination
        proxy_pass $backend_url;
    }
    
    # Configures the error page
    error_page 400 /error.html;
    location = /error.html {
        internal;
        root /usr/share/nginx/html;
        rewrite ^ /400.html;
    }
}







        #create variables for storing backend url and contents of the HTTP Forwarded header
        #set $backend_url "";
        #set $forwarded_header $http_forwarded;




        #If the Forwarded header exists and it contains 'for=ANYSTRING;' then ANYSTRING is extracted as the $1 variable and placed into backend_url
        #if ($forwarded_header) {
            #if ($forwarded_header ~* "for=([^;]+);") {
                #set $backend_url $1;
            #}
        #}